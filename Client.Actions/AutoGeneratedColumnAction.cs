using Prism.Events;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Interactivity;
using System.Windows.Media;
using Prism.Ioc;
using Client.Core.Events;
using Client.Core;

namespace Client.GridAction
{
    public class AutoGeneratedColumnAction : TriggerAction<DataGrid>
    {
        private IEventAggregator _ea;
        public AutoGeneratedColumnAction()
        {
            _ea = Helpers.ContainerProvider.Resolve<IEventAggregator>();

        }
        public void call(DataGrid param)
        {
            Invoke(param);
        }
        protected override void Invoke(object parameter)
        {
            var datagrid = parameter as DataGrid;

            /*
            List<string> ColumnsOriginalNames = new ArrayList<string>();
            for (int i = 0; i < datagrid.Columns.Count; ++i)
            {
                ColumnsOriginalNames.Add(datagrid.Columns[i].SortMemberPath);
            }
            List<int> ColumnsDisplayIndex = new ArrayList<int>();

            for (int i = 0; i < datagrid.Columns.Count; ++i)
            {

                ColumnsDisplayIndex.Add(datagrid.Columns[i].DisplayIndex);
            }
            */

            _ea.GetEvent<AutoGeneratedColumnActionEvent>().Publish((datagrid.DataContext, datagrid));
            /*
            var queryViewModel = datagrid.DataContext as QueryViewModel ;
            if (queryViewModel.Request.ColNames != null)
            {
                for (int i = 0; i < queryViewModel.Request.ColNames.Length; ++i)
                {
                    //grid.Columns[i].Header = Request.ColNames[i];
                }
            }

            for (int i = 0; i < datagrid.Columns.Count; ++i)
            {
                if (queryViewModel.colHeader.ContainsKey(datagrid.Columns[i].SortMemberPath))
                {
                    datagrid.Columns[i].Header = queryViewModel.colHeader[datagrid.Columns[i].SortMemberPath];
                }
            }
            if (queryViewModel.colDisplayIndex.Count == datagrid.Columns.Count)
            {
                for (int i = 0; i < datagrid.Columns.Count; ++i)
                {
                    if (queryViewModel.colDisplayIndex.ContainsKey(datagrid.Columns[i].SortMemberPath))
                    {
                        datagrid.Columns[i].DisplayIndex = queryViewModel.colDisplayIndex[datagrid.Columns[i].SortMemberPath];
                    }
                }
            }
            */
        }

        static T FindChild<T>(DependencyObject dependencyObject) where T : DependencyObject
        {
            Stack<DependencyObject> toVisit = new Stack<DependencyObject>();
            toVisit.Push(dependencyObject);
            while(toVisit.Count > 0)
            {
                DependencyObject current = toVisit.Pop();
                for (int i = 0; i < VisualTreeHelper.GetChildrenCount(current); ++i)
                {
                    DependencyObject currentChild = VisualTreeHelper.GetChild(current, i);
                    var currentChildAsT = currentChild as T;
                    if (currentChildAsT != null)
                        return currentChildAsT;
                    else
                        toVisit.Push(currentChild);
                }
            }
            return null;
        }

        static T FindParent<T>(DependencyObject child) where T : DependencyObject
        {
            DependencyObject parentObject = VisualTreeHelper.GetParent(child);

            if (parentObject == null)
                return null;

            var parent = parentObject as T;
            if (parent != null)
                return parent;

            return FindParent<T>(parentObject);
        }
    }
}
