using Client.GridAction;
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;

namespace Client.D_Views
{
    /// <summary>
    /// Logique d'interaction pour QueryView.xaml
    /// </summary>
    public partial class QueryView : UserControl, INotifyPropertyChanged
    {
        //public DependencyProperty FromProperty = DependencyProperty.Register("From", typeof(string), typeof(Image), new PropertyMetadata("0"));
        //public DependencyProperty ToProperty = DependencyProperty.Register("To", typeof(string), typeof(Image), new PropertyMetadata("-90"));

        private int RefreshCount { get; set; }
        private string _From;
        public string From
        {
            get { return _From; }
            set { _From = value; OnPropertyChanged("From");}
        }
        private string _To;
        public string To
        {
            get { return _To; }
            set { _To = value; OnPropertyChanged("To"); }
        }

        public QueryView()
        {
           InitializeComponent();
           refreshImage.MouseLeftButtonUp += RefreshImage_MouseLeftButtonUp;
           RefreshCount = 0;
           From = "" + 0;
           To = "" + (-90);
        }

        private void RefreshImage_MouseLeftButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            RefreshCount++;
            From = "" + (RefreshCount % 4) * (-90);
            To = "" + ((RefreshCount % 4) * (-90) - 90);
        }

        private void gridContainingRequeteResults_AutoGeneratedColumns(object sender, EventArgs e)
        {
            AutoGeneratedColumnAction AutoGeneratedColumnAction = new AutoGeneratedColumnAction();
            AutoGeneratedColumnAction.call(gridContainingRequeteResults);
        }
        #region INotify
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
        #endregion
    }
}
