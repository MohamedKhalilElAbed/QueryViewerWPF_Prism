<UserControl x:Class="Client.D_Views.QueryView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Client.D_Views"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
              xmlns:custInter="clr-namespace:Interactivity;assembly=Client.Core"
             xmlns:prism="http://prismlibrary.com/" 
             xmlns:converter="clr-namespace:Client.G_Converters;assembly=Client.Core"
             prism:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="VisibleIfTrueConverter" />
        <converter:IntToStringConverter x:Key="customIntToStringConverter" EmptyStringValue="0" />
    </UserControl.Resources>
    <Grid>
        <StackPanel x:Name="stackPanelContentOfTab" Margin="3,3,0,0">
            <StackPanel x:Name="stackPanelRefresh" Height="auto" Orientation="Horizontal">
                <Image x:Name="refreshImage" Source="C:\Users\Khalil\Downloads\c-sharp-dynamic-fundamentals\2-c-sharp-dynamic-fundamentals-m02-exercise-files\after\DynamicSQLData\Client.Resources\E_Icons\refresh-icon.png"
                    Width="20" Height="20">
                    <i:Interaction.Triggers>
                       
                        <i:EventTrigger EventName="MouseDown">
                            <custInter:EventCommand 
                            CommandName="ExecuteRefeshRequestedCommand" 
                            Command="{Binding DataContext.ExecuteRefeshRequestedCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                            CommandParameter="{Binding ElementName=gridContainingRequeteResults}"
                            />
                            <!--<i:InvokeCommandAction  Command="{Binding ExecuteRefeshRequestedCommand}"/>-->
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Image>
                <Label x:Name="lastExecuted" Content="{Binding LastExecuted}" VerticalAlignment="Center"/>
            </StackPanel>
            <StackPanel x:Name="stackPanelPaginationOptions" Height="auto" Orientation="Horizontal" Visibility="{Binding PaginationOption, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibleIfTrueConverter}}">
                <CheckBox x:Name="paginateCheckBox" Content="Paginate " IsChecked="{Binding IsPaginateOn, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" VerticalAlignment="Center">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Checked">
                            <i:InvokeCommandAction  Command="{Binding DataContext.PaginateCheckBoxCheckedCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="Unchecked">
                            <i:InvokeCommandAction  Command="{Binding DataContext.PaginateCheckBoxUnCheckedCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </CheckBox>
                <StackPanel Orientation="Horizontal" Visibility="{Binding IsPaginateOn, Converter={StaticResource VisibleIfTrueConverter}}">
                    <Label x:Name="pageSizeSuffixLabel" Content=" Maximum Rows per page" VerticalAlignment="Center" Visibility="{Binding IsPaginateOn, Converter={StaticResource VisibleIfTrueConverter}}"/>
                    <TextBox x:Name="pageSizeTextBox" Text="{Binding PageSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource customIntToStringConverter}}" TextWrapping="NoWrap" Width="auto" VerticalAlignment="Center" Visibility="{Binding IsPaginateOn, Converter={StaticResource VisibleIfTrueConverter}}">
                    
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="KeyDown">
                                <custInter:EventCommand 
                                    CommandName="PageSizeTextBoxKeyDownCommand" 
                                    Command="{Binding DataContext.PageSizeTextBoxKeyDownCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"
                                 />
                                <!--<i:InvokeCommandAction  Command="{Binding CurrentPageKeyDownCommand}" />-->
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        <!--<KeyBinding Command="{Binding Path=PageSizeTextBoxKeyDownCommand}" Key="Enter"/>-->
                        <!-- <i:Interaction.Triggers>
                        <i:EventTrigger EventName="KeyDown">
                            <i:InvokeCommandAction  Command="{Binding PageSizeTextBoxKeyDownCommand}" CommandParameter=""/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    -->
                </TextBox>
                </StackPanel>
            </StackPanel>
            <StackPanel x:Name="resultsDisplayInfoslabel" Height="auto" Orientation="Horizontal" Width="800">
                <Grid  Width="200">
                    <StackPanel Orientation="Horizontal">
                        <Label x:Name="totalNumberOfRowsLabelPrefix" Content="Total rows : "/>
                        <Label x:Name="totalNumberOfRowsLabel" Content="{Binding TotalNumberOfRows , Converter={StaticResource customIntToStringConverter}}"/>
                    </StackPanel>
                </Grid>
                <StackPanel Orientation="Horizontal" Name="pageNavigationGroup"  Visibility="{Binding PaginateInfosVisible, Mode=TwoWay, Converter={StaticResource VisibleIfTrueConverter}}" HorizontalAlignment="Center" Margin="100,0,0,0">
                    <Grid  Width="20">
                        <Label x:Name="previousPage" Content="&lt;"  Visibility="{Binding HasPreviousPage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibleIfTrueConverter}}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction  Command="{Binding DataContext.ExecutePreviousPageCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Label>
                    </Grid>
                    <Label x:Name="currentPagePrefix" Content="Page " VerticalAlignment="Center"/>
                    <TextBox x:Name="currentPage" Text="{Binding CurrentPage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource customIntToStringConverter}}" TextWrapping="Wrap" Width="auto" VerticalAlignment="Center">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="KeyDown">
                                <i:InvokeCommandAction  Command="{Binding CurrentPageKeyDownCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                    <Label x:Name="pageSeparator" Content=" / " VerticalAlignment="Center"/>
                    <Label x:Name="currentPageSuffix" Content="{Binding PageCount, Mode=OneWay, Converter={StaticResource customIntToStringConverter}}" VerticalAlignment="Center"/>
                    <Label x:Name="nextPage" Content="&gt;" Visibility="{Binding HasNextPage, Mode=TwoWay, Converter={StaticResource VisibleIfTrueConverter}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseDown">
                                <i:InvokeCommandAction  Command="{Binding DataContext.ExecuteNextPageCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Label>
                </StackPanel>
            </StackPanel>
            <DataGrid x:Name="gridContainingRequeteResults" AutoGeneratedColumns="gridContainingRequeteResults_AutoGeneratedColumns"  ItemsSource="{Binding ResultDataView, Mode=TwoWay}" MaxWidth="800"  MaxHeight="500" MinHeight="100" Height="auto">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <!--GridViewColumnHeader.MouseDoubleClick-->
                        <custInter:EventCommand 
                            CommandName="GridViewColumnHeaderClickedHandlerCommand" 
                            Command="{Binding DataContext.GridViewColumnHeaderClickedHandlerCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"
                         />
                        
                        <!--<i:InvokeCommandAction  Command="{Binding DataContext.GridViewColumnHeaderClickedHandlerCommand, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, InvokeParameter}"/>-->
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <!-- GridViewColumnHeader.OnMouseDoubleClick="GridViewColumnHeaderClickedHandler"
                <EventSetter Event="MouseDoubleClick" Handler="GridViewColumnHeaderClickedHandler" /> -->
            </DataGrid>
        </StackPanel>
    </Grid>
</UserControl>